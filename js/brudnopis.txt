function generateTags() {
  /* find all articles */
  const articles = document.querySelectorAll(optArticleSelector); // wyszukuje wszystkie artykuły
  console.log(articles);
  /* START LOOP: for every article: */

  for (let article of articles) {
    /* find tags wrapper */
    const wrapperTags = article.querySelector(optArticleTagSelector);
    console.log(wrapperTags); // wyszukje ul w których w środku są tagi wybierane

    /* make html variable with empty string */

    let html = ' '; // przygotwowuje miejsce pod wwrzucenie linka z tagiem (stringa)

    /* get tags from data-tags attribute */

    const articelTags = article.getAttribute('data-tags'); // pobieram wszystkie tagi z poszczegłnych art
    console.log(articelTags);

    /* split tags into array */
    const articelTagsArray = articelTags.split(' ');
    console.log(articelTagsArray);

    /* START LOOP: for each tag */
    for (let tag of articelTagsArray) {
      /* generate HTML of the link */

      const linkHTML =
        '<li><a href="#' + tag + '"><span>' + tag + '</span></a></li>';

      /* add generated code to html variable */

      html = html + linkHTML;

      /* END LOOP: for each tag */
      console.log(linkHTML);
    }

    /* insert HTML of all the links into the tags wrapper */

    wrapperTags.innerHTML = html;

    /* END LOOP: for every article: */
  }
}

generateTags();

function tagClickHandler(event) {
  /* prevent default action for this event */
  event.preventDefault();

  /* make new constant named "clickedElement" and give it the value of "this" */
  const clickedElement = this;

  /* make a new constant "href" and read the attribute "href" of the clicked element */
  const href = clickedElement.getAttribute('href');

  /* make a new constant "tag" and extract tag from the "href" constant */
  const tag = href.replace('#tag-', '');

  /* find all tag links with class active */
  const allActiveTagsLinks = document.querySelectorAll('.active'); // klasas z scss więc . musi być

  /* START LOOP: for each active tag link */
  for (const activeTagLink of allActiveTagsLinks) {
    /* remove class active */
    activeTagLink.classList.remove('active');

    /* END LOOP: for each active tag link */
  }
  /* find all tag links with "href" attribute equal to the "href" constant */
  const allTagsLinks = document.querySelectorAll('a[href="' + href + '"]');

  /* START LOOP: for each found tag link */
  for (const tagLink of allTagsLinks) {
    /* add class active */
    tagLink.classList.add('active');
    /* END LOOP: for each found tag link */
  }
  /* execute function "generateTitleLinks" with article selector as argument */
  generateTitleLinks('[data-tags~="' + tag + '"]');
}

function addClickListenersToTags() {
  /* find all links to tags */
  /* START LOOP: for each link */
  /* add tagClickHandler as event listener for that link */
  /* END LOOP: for each link */
}

addClickListenersToTags();*/


nowe///

function tagClickHandler(event) {
  /* prevent default action for this event */
  event.preventDefault();

  /* make new constant named "clickedElement" and give it the value of "this" */
  const clickedElement = this;

  /* make a new constant "href" and read the attribute "href" of the clicked element */
  const href = clickedElement.getAttribute('href');
  console.log(href);

  /* make a new constant "tag" and extract tag from the "href" constant */
  const tag = href.replace('#tag-', '');
  console.log(tag);

  /* find all tag links with class active */
  const allActiveTagsLinks = document.querySelectorAll('a.active[href^="#tag-"]'); // klasa z scss więc . musi być
  console.log(allActiveTagsLinks);

  /* START LOOP: for each active tag link */
  for (const activeTagLink of allActiveTagsLinks) {
    /* remove class active */
    activeTagLink.classList.remove('active');

    /* END LOOP: for each active tag link */
  }
  /* find all tag links with "href" attribute equal to the "href" constant */
  const allTagsLinks = document.querySelectorAll('a[href="' + href + '"]');

  /* START LOOP: for each found tag link */
  for (let tagLink of allTagsLinks) {
    /* add class active */
    tagLink.classList.add('active');
    /* END LOOP: for each found tag link */
  }
  /* execute function "generateTitleLinks" with article selector as argument */
  generateTitleLinks('[data-tags~="' + tag + '"]');
}


nowe

generateTitleLinks();

function generateTags() {
  /* find all articles */
  const articles = document.querySelectorAll(optArticleSelector); // wyszukuje wszystkie artykuły
  console.log(articles);
  /* START LOOP: for every article: */

  for (let article of articles) {
    /* find tags wrapper */
    const wrapperTags = article.querySelector(optArticleTagSelector);
    console.log(wrapperTags); // wyszukje ul w których w środku są tagi wybierane

    /* make html variable with empty string */

    let html = ' '; // przygotwowuje miejsce pod wwrzucenie linka z tagiem (stringa)

    /* get tags from data-tags attribute */

    const articelTags = article.getAttribute('data-tags'); // pobieram wszystkie tagi z poszczegłnych art
    console.log(articelTags);

    /* split tags into array */
    const articelTagsArray = articelTags.split(' ');
    console.log(articelTagsArray);

    /* START LOOP: for each tag */
    for (let tag of articelTagsArray) {
      /* generate HTML of the link */

      const linkHTML =
        '<li><a href="#tag-' + tag + '"><span>' + tag + '</span></a></li>';

      /* add generated code to html variable */

      html = html + linkHTML;

      /* END LOOP: for each tag */
      console.log(linkHTML);
    }

    /* insert HTML of all the links into the tags wrapper */

    wrapperTags.innerHTML = html;

    /* END LOOP: for every article: */
  }
}
poprawiony z 183 przez Aleksa : 

const tagLinkHtml =
      '<li><a class="' +
      calculateTagClass(allTags[tag], tagsParams) +
      '" href="#tag-' +
      tag +
      '"><span>' +
      tag +
      ' (' +
      allTags[tag] +
      ')' +
      '</span></a></li>';
